# Generated by Django 4.2.4 on 2023-08-18 01:18

import django.contrib.postgres.fields
import django.contrib.postgres.indexes
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import sauces.utils.fields


# Functions from the following migrations need manual copying.
# Move them and any dependencies into this file, then update the
# RunPython operations to refer to the local versions:
# sauces.migrations.0007_auto_20230817_0016
# sauces.migrations.0010_auto_20230817_2146

def create_pg_similarity(apps, schema_editor):
    schema_editor.execute("CREATE EXTENSION pg_similarity;")


def drop_pg_similarity(apps, schema_editor):
    schema_editor.execute("DROP EXTENSION IF EXISTS pg_similarity;")

def create_hash_idxs(apps, schema_editor):
    db_alias = schema_editor.connection.alias
    with schema_editor.connection.cursor() as cursor:
        for i in range(4 * 4):
            condition = "BIT_LENGTH(bits) = {bit_length} AND method = {method}".format(
                bit_length=2 ** (i // 4 + 3), method=i % 4
            )
            index_name = "hash_{}_{}_idx".format(i % 4, 2 ** (i // 4 + 3))
            sql = (
                "CREATE INDEX {index_name} ON sauces_hash USING btree (bits) "
                "WHERE {condition};".format(
                    index_name=index_name,
                    condition=condition,
                )
            )
            cursor.execute(sql)


def drop_hash_idxs(apps, schema_editor):
    db_alias = schema_editor.connection.alias
    with schema_editor.connection.cursor() as cursor:
        for i in range(4 * 4):
            index_name = "hash_{}_{}_idx".format(i % 4, 2 ** (i // 4 + 3))
            sql = "DROP INDEX IF EXISTS {index_name};".format(index_name=index_name)
            cursor.execute(sql)

class Migration(migrations.Migration):

    replaces = [('sauces', '0001_initial'), ('sauces', '0002_entity_tags_sauce_tags'), ('sauces', '0003_alter_entity_options_alter_hash_options_and_more'), ('sauces', '0004_remove_artist_direct_uploader_and_more'), ('sauces', '0005_sauce_created_at_sauce_updated_at_alter_hash_method'), ('sauces', '0006_alter_sauce_height_alter_sauce_width_and_more'), ('sauces', '0007_auto_20230817_0016'), ('sauces', '0008_artist_sauce_type_alter_sauce_downloaded_and_more'), ('sauces', '0009_artist_sauces_sauce_is_nsfw'), ('sauces', '0010_auto_20230817_2146'), ('sauces', '0011_remove_hash_hash_idx_artist_created_at_and_more')]

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='Entity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('names', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=255, unique=True), size=None)),
                ('links', django.contrib.postgres.fields.ArrayField(base_field=models.URLField(max_length=255, unique=True), size=None)),
                ('tags', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(blank=True, max_length=255), default=list, size=None)),
            ],
            options={
                'abstract': False,
                'verbose_name': 'Entity',
                'verbose_name_plural': 'Entities',
            },
        ),
        migrations.CreateModel(
            name='Hash',
            fields=[
                ('bits', sauces.utils.fields.BitField(primary_key=True, serialize=False, unique=True)),
                ('method', models.IntegerField(choices=[(0, 'Perceptual'), (1, 'Average'), (2, 'Differential'), (3, 'Wavelet')], default=0)),
            ],
            options={
                'verbose_name': 'Hash',
                'verbose_name_plural': 'Hashes',
            },
        ),
        migrations.CreateModel(
            name='Source',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('website', models.URLField(max_length=255)),
                ('api_docs', models.URLField(blank=True, max_length=255, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Uploader',
            fields=[
                ('type', models.IntegerField(choices=[(0, 'Individual'), (1, 'Scanlation Group')], default=0)),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('sauces.entity',),
        ),
        migrations.CreateModel(
            name='Sauce',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('site_urls', django.contrib.postgres.fields.ArrayField(base_field=models.URLField(max_length=255), size=None)),
                ('api_urls', django.contrib.postgres.fields.ArrayField(base_field=models.URLField(max_length=255), size=None)),
                ('file_urls', django.contrib.postgres.fields.ArrayField(base_field=models.URLField(max_length=255), size=None)),
                ('source_site_id', models.CharField(max_length=255)),
                ('downloaded', models.BooleanField(default=False)),
                ('height', models.PositiveIntegerField()),
                ('width', models.PositiveIntegerField()),
                ('hashes', models.ManyToManyField(related_name='sauces', to='sauces.hash')),
                ('source', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sauces', to='sauces.source')),
                ('tags', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(blank=True, max_length=255), default=list, size=None)),
                ('created_at', models.DateTimeField(auto_now_add=True, default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'abstract': False,
                'unique_together': {('source', 'source_site_id')},
            },
        ),
        migrations.CreateModel(
            name='MangaSauce',
            fields=[
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('sauces.sauce',),
        ),
        migrations.DeleteModel(
            name='Entity',
        ),
        migrations.DeleteModel(
            name='MangaSauce',
        ),
        migrations.DeleteModel(
            name='Uploader',
        ),
        migrations.RunPython(
            code=create_pg_similarity,
            reverse_code=drop_pg_similarity,
            atomic=True,
        ),
        migrations.CreateModel(
            name='Artist',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('names', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=255), blank=True, db_index=True, size=None)),
                ('links', django.contrib.postgres.fields.ArrayField(base_field=models.URLField(max_length=255), size=None)),
                ('tags', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(blank=True, max_length=255), db_index=True, default=list, size=None)),
            ],
        ),
        migrations.AddField(
            model_name='sauce',
            name='type',
            field=models.PositiveSmallIntegerField(choices=[(0, 'Art'), (1, 'Animated'), (2, 'Manga'), (3, 'Doujinshi'), (4, 'Anime')], default=0),
        ),
        migrations.AlterField(
            model_name='sauce',
            name='downloaded',
            field=models.BooleanField(db_index=True, default=False),
        ),
        migrations.AddIndex(
            model_name='hash',
            index=django.contrib.postgres.indexes.BTreeIndex(['bits', 'method'], fillfactor=55, name='hash_idx'),
        ),
        migrations.AddField(
            model_name='artist',
            name='sauces',
            field=models.ManyToManyField(blank=True, related_name='artists', to='sauces.sauce'),
        ),
        migrations.AddField(
            model_name='sauce',
            name='is_nsfw',
            field=models.BooleanField(default=False),
        ),
        migrations.RunPython(
            code=create_hash_idxs,
            reverse_code=drop_hash_idxs,
        ),
        migrations.RemoveIndex(
            model_name='hash',
            name='hash_idx',
        ),
        migrations.AddField(
            model_name='artist',
            name='created_at',
            field=models.DateTimeField(auto_now_add=True, default=django.utils.timezone.now),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='artist',
            name='updated_at',
            field=models.DateTimeField(auto_now=True),
        ),
    ]
