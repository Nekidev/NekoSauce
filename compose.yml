version: "3.8"
name: "nekosauce"
services:
  backend:
    build:
      context: ./src/backend
      args:
        BUNNY_USERNAME: ${BACKEND_BUNNY_USERNAME}
        BUNNY_PASSWORD: ${BACKEND_BUNNY_PASSWORD}
        BUNNY_REGION: ${BACKEND_BUNNY_REGION}
        BUNNY_HOSTNAME: ${BACKEND_BUNNY_HOSTNAME}
    command: "/bin/sh -c \"/app/run.sh\""
    depends_on:
      - database
      - redis
      - rabbitmq
    volumes:
      - static:/static
    secrets:
      - BACKEND_SECRET_KEY
    restart: always
  frontend:
    build: ./src/frontend
    command: "npm run start"
    restart: always
  database:
    build: ./src/database
    environment:
      POSTGRES_PASSWORD_FILE: /run/secrets/DATABASE_PASSWORD
      POSTGRES_USER: ${DATABASE_USERNAME}
      POSTGRES_DB: ${DATABASE_NAME}
    volumes:
      - database:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-q", "-d", "${DATABASE_POSTGRES_DB}", "-U", "${DATABASE_POSTGRES_USER}"]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s
    restart: always
  redis:
    image: redis:alpine
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s
    restart: always
  rabbitmq:
    image: rabbitmq:alpine
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USERNAME}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s
    restart: always
  nginx:
    image: nginx:1-alpine
    depends_on:
      - backend
      - frontend
    volumes:
      - static:/static
      - ./src/nginx/nekosauce.conf:/etc/nginx/conf.d/default.conf
      - ./src/nginx/errors:/etc/nginx/errors
    secrets:
      - NGINX_CERT_CERTIFICATE
      - NGINX_CERT_PRIVATE_KEY
    ports:
      - "443:443"
    restart: always
secrets:
  BACKEND_SECRET_KEY:
    file: ./secrets/BACKEND_SECRET_KEY.txt
  DATABASE_PASSWORD:
    file: ./secrets/DATABASE_PASSWORD.txt
  NGINX_CERT_CERTIFICATE:
    file: ./secrets/NGINX_CERT_CERTIFICATE.pem
  NGINX_CERT_PRIVATE_KEY:
    file: ./secrets/NGINX_CERT_PRIVATE_KEY.pem
volumes:
  database:
  static: